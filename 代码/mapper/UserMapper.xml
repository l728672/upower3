<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
    <mapper namespace="com.exam.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.exam.model.User" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <id column="user_id" property="userId" jdbcType="VARCHAR" />
        <result column="class_id" property="classId" jdbcType="INTEGER"/>
        <result column="username" property="username" jdbcType="VARCHAR" />
        <result column="password" property="password" jdbcType="VARCHAR" />
        <result column="description" property="description" jdbcType="VARCHAR" />
        <result column="grade" property="grade" jdbcType="VARCHAR" />
        <result column="salt" property="salt" jdbcType="VARCHAR" />
        <result column="nickname" property="nickname" jdbcType="VARCHAR" />
        <result column="email" property="email" jdbcType="VARCHAR" />
        <result column="phone" property="phone" jdbcType="VARCHAR" />
        <result column="sex" property="sex" jdbcType="INTEGER" />
        <result column="age" property="age" jdbcType="INTEGER" />
        <result column="img" property="img" jdbcType="VARCHAR" />
        <result column="status" property="status" jdbcType="INTEGER" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP" />
        <association property="institute" javaType="com.exam.model.Institute" >
        	<result property="id" jdbcType="INTEGER" column="institute_id"/>
			<result property="instituteName" jdbcType="VARCHAR" column="institute_name"/>
			<result property="description" jdbcType="VARCHAR" column="institute_description"/>	
        </association>
        <association property="classes" javaType="com.exam.model.Classes" >
        	<result property="id" jdbcType="INTEGER" column="class_id"/>
			<result property="className" jdbcType="VARCHAR" column="class_name"/>
			<result property="description" jdbcType="VARCHAR" column="class_description"/>	
        </association>
        <collection property="roles" column="role_id" javaType="ArrayList" ofType="com.exam.model.Role">
            <result property="roleId" jdbcType="INTEGER" column="role_id"/>
            <result property="name" jdbcType="VARCHAR" column="role_name"/>
            <result property="description" jdbcType="VARCHAR" column="role_description"/>
        </collection>
    </resultMap>
    <sql id="Base_Column_List" >
        id, user_id, class_id, username, password, grade, salt, nickname, email, phone, sex, age, img, status,
        create_time, update_time, last_login_time
    </sql>
    
    <select id="findByCondition" parameterType="com.exam.vo.UserConditionVo" resultMap="BaseResultMap">
    	SELECT
    	u.*,
    	i.id AS institute_id,
    	i.institute_name,
    	i.description AS institute_description,
    	c.id AS class_id,
    	c.class_name,
    	c.description AS class_description,
    	r.role_id AS role_id,
    	r.name AS role_name,
    	r.description AS role_description
    	FROM
    	user u
    	INNER JOIN classes c ON u.class_id = c.id
    	INNER JOIN institute i ON c.ins_id = i.id
    	LEFT JOIN user_role ur ON u.user_id = ur.user_id
        LEFT JOIN role r ON ur.role_id = r.role_id
    	WHERE 1=1
    	<if test="username !=null and username != ''">
            AND u.username like concat('%', #{username, jdbcType=VARCHAR}, '%')
        </if>
        <if test="nickname !=null and nickname != ''">
            AND u.nickname like concat('%', #{nickname, jdbcType=VARCHAR}, '%')
        </if>
        <if test="grade != null and grade != ''">
			AND	u.grade = #{grade}
		</if>
        <if test="insId !=null">
            AND c.ins_id = #{insId}
        </if>
        <if test="classId !=null">
            AND u.class_id = #{classId}
        </if>
        <if test="status != null">
			AND	u.status = #{status}
		</if>
		order by u.id asc
    </select>
    
    <select id="selectGradeList" resultType="String">
    	SELECT distinct grade FROM user
    </select>

    <select id="selectUsers" resultMap="BaseResultMap" parameterType="com.exam.model.User">
        SELECT a.*,c.role_id AS role_id,c.name AS role_name,c.description AS  role_description
        FROM user a
        left join user_role b on a.user_id = b.user_id
        left join role c on b.role_id = c.role_id
        WHERE a.status=1
        <if test="username !=null and username != ''">
            AND a.username like concat('%', #{username}, '%')
        </if>
        <if test="email !=null and email != ''">
            AND a.email like concat('%', #{email}, '%')
        </if>
        <if test="phone !=null and phone != ''">
            AND a.phone like concat('%', #{phone}, '%')
        </if>
    </select>

    <select id="selectByUsername" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM user WHERE username = #{username,jdbcType=VARCHAR}
    </select>

    <select id="selectByUserId" resultMap="BaseResultMap">
    	SELECT
    	u.*,
    	i.institute_name,
    	c.id AS class_id,
    	c.class_name,
    	r.name AS role_name
    	FROM
    	user u
    	INNER JOIN classes c ON u.class_id = c.id
    	INNER JOIN institute i ON c.ins_id = i.id
    	LEFT JOIN user_role ur ON u.user_id = ur.user_id
        LEFT JOIN role r ON ur.role_id = r.role_id
        WHERE u.user_id = #{userId,jdbcType=VARCHAR}
    </select>
    
    <select id="selectRoleByUserId" resultType="String">
    	SELECT
    	r.name AS role_name
    	FROM
    	user u
    	LEFT JOIN user_role ur ON u.user_id = ur.user_id
        LEFT JOIN role r ON ur.role_id = r.role_id
        WHERE u.user_id = #{userId,jdbcType=VARCHAR}
    </select>
    
    <insert id="batchInsert" parameterType="java.util.List">
    	<selectKey resultType ="java.lang.Integer" keyProperty= "id" order= "AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey >
    	INSERT INTO user (user_id,class_id,username,password,description,salt,grade,
        nickname,email,phone,sex,age,img,status)
    	VALUES
    	<foreach collection="list" item="item" index="index" separator=",">
    		(#{item.userId},#{item.classId},#{item.username},#{item.password},#{item.description},#{item.salt},#{item.grade},#{item.nickname},
    		#{item.email},#{item.phone},#{item.sex},#{item.age},#{item.img},#{item.status})
    	</foreach>
    </insert>

    <update id="updateLastLoginTime" parameterType="com.exam.model.User">
        update user SET last_login_time = now() where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByUserId" parameterType="com.exam.model.User">
        update user SET username=#{username},sex=#{sex},nickname=#{nickname},grade=#{grade},class_id=#{classId},email=#{email},phone=#{phone},age=#{age},img=#{img},description=#{description},update_time = now() where user_id = #{userId}
    </update>

    <update id="updateStatusBatch" parameterType="map">
        UPDATE
        user
        SET
        status=#{status}, update_time=now()
        where
        user_id in
        <foreach collection="userIds" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>
    <select id="findByRoleId" resultMap="BaseResultMap">
        SELECT a.id, a.user_id, a.username, a.password, a.salt, a.email, a.phone, a.sex, a.age, a.status,
        a.create_time, a.update_time, a.last_login_time FROM user a INNER JOIN user_role b ON a.user_id = b.user_id WHERE b.role_id = #{roleId,jdbcType=VARCHAR}
    </select>

    <select id="findByRoleIds" resultMap="BaseResultMap">
        SELECT a.id, a.user_id, a.username, a.password, a.salt, a.email, a.phone, a.sex, a.age, a.status,
        a.create_time, a.update_time, a.last_login_time FROM user a INNER JOIN user_role b ON a.user_id = b.user_id
        WHERE b.role_id IN
        <foreach collection="list" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    
    <select id="academyPassNumSta" resultType="HashMap">
    	SELECT
    	COUNT(u.user_id) AS num,
    	i.institute_name
    	from
    	user u
		INNER JOIN classes c ON u.class_id = c.id
		INNER JOIN institute i ON c.ins_id = i.id 
		GROUP BY
		i.id
    </select>
    
    <delete id="deleteBatch" parameterType="map">
    	DELETE
    	FROM
    	user
    	WHERE
    	user_id in
        <foreach collection="userIds" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

</mapper>